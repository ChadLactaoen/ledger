<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="DashboardMapper">

    <resultMap id="CategoryExpenseMapper" type="com.lactaoen.ledger.model.dashboard.CategoryExpenseMapper">
        <id property="categoryId" column="category_id" />
        <result property="categoryName" column="category_name" />
        <result property="transactionCount" column="transaction_count" />
        <result property="total" column="total" />
        <result property="averageSpent" column="average_spent" />
        <association property="parentCategory" column="parent_id" select="CategoryMapper.getCategoryById" />
    </resultMap>

    <resultMap id="GameGamblingMapper" type="com.lactaoen.ledger.model.dashboard.GameGamblingMapper">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="color" column="color" />
        <result property="wagered" column="wagered" />
        <result property="profit" column="profit" />
        <result property="sessions" column="sessions" />
        <result property="wins" column="wins" />
        <result property="ties" column="ties" />
    </resultMap>

    <select id="getCategoryExpensesByYear" resultMap="CategoryExpenseMapper">
        SELECT  /*DashboardMapper.getCategoryExpensesByYear */
            c.category_id,
            c.name AS category_name,
            COUNT(t.transaction_id) AS transaction_count,
            COALESCE(ROUND(SUM(ABS(t.price)), 2), 0) AS total,
            COALESCE(ROUND(AVG(ABS(t.price)), 2), 0) AS average_spent,
            c.parent_id
        FROM category c
        LEFT JOIN `transaction` t ON c.category_id = t.category_id AND YEAR(t.date) = #{id}
        WHERE c.parent_id IS NOT NULL
        AND (t.memo LIKE 'Reimburse%' OR (t.price > 0 AND t.memo NOT LIKE 'Reimburse%'))
        GROUP BY c.category_id
        ORDER BY c.parent_id, c.category_id
    </select>

    <select id="getParentCategorySpendingByPeriodId" resultType="java.util.HashMap">
        SELECT /* DashboardMapper.getParentCategorySpendingByPeriodId */
            pc.name, COALESCE(ROUND(SUM(a.total), 2), 0) AS total
        FROM period p
        JOIN allocation a ON p.period_id = a.period_id
        JOIN category c ON a.category_id = c.category_id
        JOIN category pc ON c.parent_id = pc.category_id
        WHERE p.period_id = #{id}
        GROUP BY pc.category_id
        ORDER BY pc.category_id
    </select>

    <select id="getParentCategorySpendingByYear" resultType="java.util.HashMap">
        SELECT /* DashboardMapper.getParentCategorySpendingByYear */
            pc.name, COALESCE(ROUND(SUM(t.price), 2), 0) AS total
        FROM category pc
        JOIN category c ON pc.category_id = c.parent_id
        LEFT JOIN transaction t ON c.category_id = t.category_id AND YEAR(t.date) = #{id}
        WHERE pc.parent_id IS NULL
        GROUP BY pc.category_id
        ORDER BY pc.category_id
    </select>

    <select id="getGameGamblingByYear" resultMap="GameGamblingMapper">
        SELECT
            g.game_id AS id, g.name,
            COALESCE(dro.wagered, 0) AS wagered,
            COALESCE(dro.profit, 0) AS profit,
            COALESCE(dro.sessions, 0) AS sessions,
            COALESCE(dro.wins, 0) AS wins,
            COALESCE(dro.ties, 0) AS ties
        FROM game g
        LEFT JOIN (
            SELECT
            g.game_id,
            g.name,
            SUM(b.wager) AS wagered,
            SUM(b.profit) AS profit,
            COUNT(b.bet_id) AS sessions,
            SUM(CASE WHEN profit > 0 THEN 1 ELSE 0 END) AS wins,
            SUM(CASE WHEN profit = 0 THEN 1 ELSE 0 END) AS ties
            FROM game g
            LEFT JOIN game kg ON g.game_id = kg.parent_id
            LEFT JOIN bet b ON g.game_id = b.game_id OR kg.game_id = b.game_id
            WHERE g.parent_id IS NULL
            AND b.profit IS NOT NULL
            AND YEAR(b.date) = #{id}
            GROUP BY g.game_id
        ) AS dro ON g.game_id = dro.game_id
        WHERE g.parent_id IS NULL
    </select>

    <select id="getGameGamblingByYearAndParentName" resultMap="GameGamblingMapper">
        SELECT
            g.game_id AS id, g.name, g.color,
            COALESCE(dro.wagered, 0) AS wagered,
            COALESCE(dro.profit, 0) AS profit,
            COALESCE(dro.sessions, 0) AS sessions,
            COALESCE(dro.wins, 0) AS wins,
            COALESCE(dro.ties, 0) AS ties
        FROM game g
        LEFT JOIN (
            SELECT
                g.game_id,
                g.name,
                SUM(b.wager) AS wagered,
                SUM(b.profit) AS profit,
                COUNT(b.bet_id) AS sessions,
                SUM(CASE WHEN profit > 0 THEN 1 ELSE 0 END) AS wins,
                SUM(CASE WHEN profit = 0 THEN 1 ELSE 0 END) AS ties
            FROM game g
            JOIN game pg ON g.parent_id = pg.game_id
            LEFT JOIN bet b ON g.game_id = b.game_id
            WHERE g.parent_id IS NOT NULL
            AND b.profit IS NOT NULL
            AND YEAR(b.date) = #{year}
            AND g.parent_id IN (
                SELECT game_id
                FROM game
                WHERE name = #{name}
            )
        GROUP BY g.game_id
        ) AS dro ON g.game_id = dro.game_id
        WHERE g.parent_id IN (
            SELECT game_id
            FROM game
            WHERE name = #{name}
        )
    </select>

    <select id="getCasinoGamblingByYearAndParentName" resultMap="GameGamblingMapper">
        SELECT
            c.casino_id AS id,
            c.name,
            SUM(b.wager) AS wagered,
            SUM(b.profit) AS profit,
            COUNT(b.bet_id) AS sessions,
            SUM(CASE WHEN profit > 0 THEN 1 ELSE 0 END) AS wins,
            SUM(CASE WHEN profit = 0 THEN 1 ELSE 0 END) AS ties
        FROM casino c
        LEFT JOIN bet b ON c.casino_id = b.casino_id
        LEFT JOIN game g ON b.game_id = g.game_id
        LEFT JOIN game pg ON g.parent_id = pg.game_id
        WHERE pg.game_id IN (
            SELECT game_id
            FROM game
            WHERE name = #{name}
        )
        AND b.profit IS NOT NULL
        AND YEAR(b.date) = #{year}
        AND g.parent_id IS NOT NULL
        GROUP BY c.casino_id
    </select>

    <select id="getBetsByYear" resultMap="BetMapper.Bet">
        SELECT /* DashboardMapper.getBetsByYear */
            bet_id, date, game_id, casino_id, wager, profit, memo
        FROM bet
        WHERE YEAR(date) = #{id}
        ORDER BY date DESC, bet_id DESC
    </select>

</mapper>